[
  
  {
    "title": "社区推荐系统",
    "url": "/posts/%E7%A4%BE%E5%8C%BA%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/",
    "categories": "system design, work",
    "tags": "",
    "date": "2021-09-18 00:00:00 +0800",
    





    "snippet": "目的推荐系统是内容类网站不可或缺的组成部分。而推荐系统的最终目的总结起来就是:  能够通过精确地给用户推荐内容，来提升用户留存率和活跃（目前新用户次日留存率平均22%）  有能力高效地将运营内容推送给目标用户问题推荐系统最主要的问题是两点:  推荐效率  推荐准确度每个系统中可能都会存在不同的用户特征数据，可能是属性数据，也可能是行为数据，但往往这种用户特征数据的数据量是比较庞大的。对这些大量特征数据进行快速的分析和处理就是推荐效率的难题所在。而正确的选择用户特征数据，提取方式和判断方式是推荐准确度的难题所在。处理流程由于要处理的数据量较为庞大，业界对推荐系统的处理流程大都是以下流程: gantt  title  Adding GANTT diagram functionality to mermaid  apple :a, 2017-07-20, 1w  banana :crit, b, 2017-07-23, 1d  cherry :active, c, after b a, 1dasdfadf flowchart LR    A(输入) --&amp;gt;|万/百万/亿| B(召回)    B --&amp;gt; |千/万| C(排序)    C --&amp;gt; |百/千| D(调整)    D --&amp;gt; |十/百| E(输出)召回召回最初步的过滤也是最重要的筛选环节，召回就是会通过特征数据对内容进行合理的筛选，使大量的数据会在这个环节被匹配过滤掉。我的理解是这个环节会更关注通用的内容特征和用户行为数据表达的特征。召回的方式一般都可以总结为内容与内容，人与人之间的练习。进一步可以归纳为以下几种            召回方式      说明      例子                  i2i      通过内容推荐内容      给用户推荐相同话题下的内容              u2i      通过用户行为推荐内容      用户玩过了《愤怒小鸟》，还会给他推荐 《愤怒小鸟》              u2i2i      通过用户行为推荐相似内容      用户玩过了《愤怒小鸟》，还会给他推荐 《愤怒小鸟》其他系列作品，或游戏作品              u2u2i      通过用户的相似用户推荐内容      用户A和B是相似用户或朋友，会推荐用户B喜欢的内容给用户A              u2tag2i      计算出用户和内容的标签，通过标签匹配      用户A喜欢奥特曼，内容a是奥特曼主题，推荐内容a给用户A      Tips: u表示user，i表示item排序接收召回的输出，再通过用户更细节的数据，来判断用户的喜好，对内容数据进行排序，进一步选择出合适的内容。我的理解是这一步会加入更多用户个性化属性特征数据调整对排序的输出再进行数据调整和补齐，例如去重，业务数据补全，推荐数据不全，最终输出给用户系统架构要做好推荐系统，涉及到的知识和系统非常多，需要涉及大数据的处理，机器学习对推荐模型的训练，数据高效响应的缓存设计等等。推荐系统可以按模块被划分为3个部分：  基础数据  推荐模型  线上服务在架构上，Netflix在博客上讲述了它所使用的大致架构设计，我们可以借鉴。Netflix推荐系统架构Netflix在System Architectures for Personalization and Recommendation中有介绍过其使用的推荐系统架构，如下图核心是因为推荐系统所需要的数据处理和分析过程较复杂，难度较大，所以将数据分为三个层次进行处理：  offline:  用来处理数据量较大，耗时较长，无需及时响应的数据，并将处理结果进行存储。  nearline:  用来处理耗时不会太长，无需及时响应的数据。  online:  用来计算耗时极短的计算，基本上就是做实时推荐。需要有降级方案，避免计算时间过长。一期落地方案由于推荐系统比较复杂，需要分期进行实现，且我们当前用户数据和内容数据的丰富度也没有那么高。所以我们第一期，先实现简单的基础功能。可用特征分析用户 flowchart LR    A(用户) --&amp;gt; B(年龄)    A --&amp;gt; C(性别)    A --&amp;gt; D(关注人关系)    A --&amp;gt; E(编程能力)作品graph LR    A(作品) --&amp;gt; B(作品类型)    A --&amp;gt; C(星球标签)    A --&amp;gt; D(作品评级)行为graph LR    A(行为) --&amp;gt; B(点赞)    A --&amp;gt; C(收藏)    A --&amp;gt; D(打赏)    A --&amp;gt; E(浏览)可以online计算的部分  用户: 年龄，性别，编程能力  作品: 作品类型，星球标签，作品评级需要nearline或offline计算的部分  用户: 关注人关系的相关性计算  行为: 所有的行为分析计算如何简化按照之前说的，推荐系统极其复杂，所以我们需要进行分期实现，第一期会是一个简化的版本。推荐系统中最复杂的部分以及开发周期较长的部分就是大数据处理和人工智能模型训练的部分。因此，第一期我们就去掉这两大块部分。简化的架构如下图所示：graph TD    A(行为数据) --&amp;gt; D(nearline计算)    B(内容属性数据) --&amp;gt; D(nearline计算)    C(用户属性数据) --&amp;gt; D(nearline计算)    B --&amp;gt; G    C --&amp;gt; G    D --&amp;gt; E(Cache)    D --&amp;gt; F(Mysql/Mongo)    E --&amp;gt; G(召回计算)    F --&amp;gt; G    G --&amp;gt; H(排序/调整/过滤)    H --&amp;gt; I(客户端)    I --&amp;gt; A召回计算规则根据Netflix的描述，在召回规则中，热度值和新鲜度也会是一个非常重要的元素。与产品沟通后补充AB测试设计推荐系统另一个重要的部分就是验证推荐策略的有效性，所以AB测试是推荐系统不可或缺的部分。待补充"
  },
  
  {
    "title": "数据结构的联系与使用",
    "url": "/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%81%94%E7%B3%BB%E4%B8%8E%E4%BD%BF%E7%94%A8/",
    "categories": "programming",
    "tags": "",
    "date": "2021-09-13 00:00:00 +0800",
    





    "snippet": "前言作为程序员，基础数据结构是我们在日常工作中必须掌握的基础知识，就像是建房子时的图纸，而熟练地掌握数据结构可以让我们在工作中能够以更加高效和巧妙的方式来解决所遇到的问题。然而，没有一个数据结构是完美的，每一个数据结构都是优点和缺点并存，就如同世间万物，总是有正反或阴阳两面。每一个数据结构都是计算机科学家们为了解决某一个问题而发明的，并没有好坏之分，只是在具体的场景下，会有更适合的应用。因此，随着计算机科学的发展，就产生了非常多的数据结构。这里我尝试由浅入深去猜想各种数据结构产生的原因并将它们进行串联，期望能够达到方便记忆的效果。提醒: 以下数据结构演进原因为个人理解和猜想，只是为了串联各种数据结构。基础结构Array查找 O(1)插入/删除 O(n)数组应该是我们日常中使用最多的数据结构，数组是由一个个元素组成，并以下标一一做标记。它的特别非常明确，可以直接通过下标查找或修改元素，因此查找和修改非常高效；但要插入或删除元素时，需要重新排列下标，效率较低。因此数组适合多读少写的场景（这里的写指插入和删除元素）。那肯定要解决插入效率低的场景啊，所以程序员就想到取消下标的方式，将每个元素按顺序串联起来，以串联的顺序来决定元素所在的问题，这也就是LinkedList了。LinkedList查找 O(n)插入/删除 O(1)链表也是由一个一个元素组成，但是以一种串联的形式组成。 链表的元素叫node，下一个node指向上一个node，一直到最前面的node，像是一个链条。如果要在AB两个node中新增一个node，只需B node指向新node，而新node再指向A，就完成了插入，非常高效。但因为缺少下标，它不是很擅长查找的场景，因为没有下标来快速定位，它需要一个一个node地询问，直到找到自己的目标。因此数组适合少读多写的场景。Map查找 O(1)插入 O(1)但程序员肯定会遇到既需要查找快，也需要修改快的场景啊。那这种场景下，Array和LinkedList都不是特别能够满足要求了。于是，程序员就想如何解决这样的问题。程序员先从分析Array下手Array修改低下的原因主要是：  在中间进行元素插入或删除，就需要重排下标  初始大小固定，如果超出，则需要重新分配和迁移元素所以，要解决Array修改效率低的问题就需要  取消下标，用非顺序数字的形式来作为索引，进行查找  不设置固定大小于是程序员就自己实现了新的数据结构来尝试解决这个问题，就有了Map。tips：Java中Map是通过Array实现的，所以其实固定大小的问题在Java中没有被解决。Map是由一个个pairs组成，pairs是由key和value组成。Map的优势就是可通过key快速查找到value的值。也可以高效地插入新的Pair。当然Map也有缺点，Map的索引不是类似有序数字的下标，所以Key是无序的，且作为索引，Key元素不可重复。Tree查找 O(logN)插入 O(1)于是程序员又想，那能不能从LinkedList入手，尝试去解决LinkedList的缺陷。LinkedList的问题是查找效率。通过顺序查找是比较低效的查找方式，而在元素有序的条件下，最有效率的方式应该就是二分法查找了。二分法的思路有点像算法中的“剪枝”，当路径分叉时，只关注有用的路径。能不能通过二分法查找来提高LinkedList的查找效率呢？程序员受到二分法查找的启发，发明了又一个新的数据结构 - Tree。Array 的衍生Vector(Java和C++中的实现)Vector在理论上的定义就是一维数组。但在Java中的实现会有些特点。众所周知，Array有个限制，就是在初始化时需要给定大小来确定分配的内存大小。程序员写多了Size不够用的Array之后，心想将这个过程抽个方法吧，太累了，后面就演进成了一个新型数据结构Vector，其实就是能够自动扩展的Array了。Java中实现的Vector还有个特点，插入元素时是单线程加锁插入。Stack当程序员经常要写插入元素到数组，然后以倒序输出的场景。他就在想，这块代码是不是也能抽离一下，每次都要记录下标和Size，封装一下应该就通用很多。于是，就有了Stack，一个以First In Last Out闻名的数据结构。其实就是倒序排序了一下。Queue既然有了正序输入倒序输出的场景（Stack），自然少不了正序输入正序输出的场景了，于是程序员也创造了Queue，类似管道或队列，所以Queue的特点就是First In First Out。DeQueue(Double-end Queue)有了Queue之后，程序员又想，要不再做灵活点，方便我从头尾都可以输入，也可以从头尾都可以读取，于是就有了DeQueque。Map的衍生Set程序员偶尔会遇到需要元素唯一的场景，如果有Array来做，我们在收集完元素后，还需要进行一个算法复杂度为O(n)的排除计算。因此期望用一个数据结构来解决这个问题，就叫Set。之前我们说到过Map有个特点是Key元素不可重复，Java程序员发现可以利用Map这个特性，在元素去重的场景做到自然过滤，避免了多余的排除计算，因此Java中，Set的底层是通过Map来做实现的，也叫HashSet。HashMap/HashTableHashMap可以理解为Map的衍生，也可以理解为是其中一种具体的实现。当Map中的元素较多时，如果要去判断某个元素是否存在于Map中，就会遍历N次。所以程序员们就想了个方法来减少Key的数量，来提高这里的效率。通过结合Hash算法，可以控制Pair中Key的冲撞几率，可以用较少的Key储存更多的Value。这个设计就很类似于索引。然而，这样的结果就是Pair中的Value就会存在多个，在Java中是使用LinkedList来存储同一个pair中的多个value的。tips: Java8之后，也对HashMap做了优化，当碰撞的次数大于8并且总容量大于64的时候，储存Value的链表就会变为红黑树结构（这里应该就默认这里变为了需要提高读效率的场景了)。tips2: 在Java中，HashMap和HashTable有个小的区分实现，HashTable的元素插入是会加锁(sychronized)插入的。BloomFilterBloomFilter一般比较少被大家使用，但实际用处还比较大。BloomFilter是一个很长的二进制向量(可以使用BitSet, 也可以使用Map)和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都比一般的算法要好的多，缺点是有一定的误识别率和删除困难。Tree的衍生Search Tree我们之前有说到，Tree的查找是有受到二分法的启发。二分法可以使用的一个必要条件就是需要元素是有序的。因此，想要Tree的查找应用二分法查找的方式，自然其中的元素也必须是有序的。这种Tree，被命名为Search Tree，其中任何节点都必须比左子树中的节点大，而比右子树上的节点小。BinaryTree那要让二分查找法在Tree中的效率最高，就最好是每个节点下都之后两个子节点，这种类型的Tree我们叫它BinaryTree。所以BinarySearchTree理论上是Tree中搜索速度最快的。BalancedTree(AVL Tree, Treap, Splay Tree, RedBlackTree et al.)Tree的搜索效率还有一个重要的影响因素，就是树的高度。那程序员就想如何才能让树的高度永远处于一个最优的情况呢？其实高度最优的情况就是避免产生极度坏的情况(极度坏的情况其实就类似链表了)，让根节点到每个叶子节点的路径都相等，就避免了最坏查询情况的产生。要想达到该效果，就要在每次新元素加入或移除的时候，对树做一些额外调整，也就产生了自平衡树。Priority Queue &amp;amp; Heap(Max &amp;amp; Min)基于Search Tree的一个拓展，Seach Tree的排序是从左到右的。那程序员有天就想，如果是一个优先取最小值的场景的话，将排序做成垂直的，从小到大排列，那不是第一个就是最小值么，于是做了这样的优化后，就产生了Priority Queue。同理，也适用于从大到小排列的场景。tips: Heap是Priority Queue的一种实现Tree在业务场景中衍生的数据结构Trie利用Tree分叉的结构来做单词搜索，提升搜索效率，产生了新的数据结构Trie。Disjoint-Set/Union Find SetDisjoint-set又叫并查集，一般被用来做分类和区分。Disjoint-set的实现一般是使用类似Tree的结构，利用了Tree每个节点都只会有一个Parent的特性来做分类和合并。当两个节点的root节点一致时，则认为两个节点为一类。GraphTree有一个特点就是每个节点都只能有一个父节点，但现实生活中，肯定会出现需要一个节点有多个父节点的情况，就产生了一个特殊的Tree，一个新的数据结构，被命名为Graph。Graph由vertices和edges组成。B TreeB Tree的场景有点特殊，在数据库设计者在设计索引时，肯定是要符合多写多读的场景的，再加上对顺序的要求，很自然是应该应用Tree。但如果使用上面说到的BinarySearchTree，会产生一个问题。因为数据库的数据最终是要存储在硬盘上的，开发同学可能都知道磁盘查询是个性能较慢的操作，特别是随机查询。要知道Tree的每一个节点都是独立的，所以不可能是连续数据，如果按照BinarySearchTree的方式来做，就会使得树的高度增加，导致查询节点的次数增多，每一个都要做一次磁盘查询，这样总体上性能就会很慢。那为了解决这个问题，数据库的设计者们就想到了一个针对性的优化-减少树的高度，一个节点多存些数据。于是就发明了一种新的Tree的数据结构，命名为B Tree。B+ TreeB+ Tree是B Tree的增强版，是为了优化B树刚好在范围查询时，查找的数据没有在当前节点上，而导致额外查询其他兄弟节点的场景。所以数据库设计者又将B Tree中的兄弟节点都链接起来，加快同级查询，就产生了B+ Tree。既然说到了关系型数据库所使用的B+树，那就顺带讲一下redis中应用的另一种业务场景中衍生的数据结构。LinkedList在业务场景中衍生的数据结构跳表(SkipList)我们之前提到过LinkedList适合多写少读的场景，因为查询效率不高。跳表的发明就是尝试解决LinkedList的这个缺陷的。跳表可以理解为是加了索引的LinkedList。Redis中就是用跳表来实现有序集合的。那Redis为什么不用树来实现呢？我的理解是Redis是基于内存的，所以不用过于考虑硬盘查询的性能消耗，就没有必要使用B+树这样的结构，那最快的查询树就是BinarySearchTree了。但BinarySearchTree在区间范围查询上有个缺陷，也就是为什么B树演进为B+树的原因。因此，就发明了跳表，LinkedList加上索引后，采用的思路也是类似于二分法的思路，也解决了Tree在范围查询上的缺陷，唯独就是理论上会比Tree多占用些空间，以空间换时间。结语希望读过这篇文章的同学都能够理解每一个数据结构产生的原因，并能够熟练地应用。附上我整理的关系图最后推荐这个网站，它将各种数据结构和算法以可视化的形式展示了出来，非常便于理解"
  },
  
  {
    "title": "我放弃了曾经所向往的「远程工作」",
    "url": "/posts/%E6%88%91%E6%94%BE%E5%BC%83%E4%BA%86%E6%9B%BE%E7%BB%8F%E6%89%80%E5%90%91%E5%BE%80%E7%9A%84%E8%BF%9C%E7%A8%8B%E5%B7%A5%E4%BD%9C/",
    "categories": "life, work",
    "tags": "",
    "date": "2021-07-18 00:00:00 +0800",
    





    "snippet": "背景最近我得到了一个非常棒的远程工作的机会，公司处于发展上升期，薪资福利非常具有竞争力。而经过了一周多的思想挣扎后，我放弃了这个offer。这个决定甚至可能令一周前的自己不解。所以也想写篇文章来记录一下。向往的远程工作相信从事开发，写作或设计的人都多少听说过远程工作或Remote。这种当下新颖的工作方式总会让第一次听说的人不禁羡慕起来。这种能够让社畜们拥有时间和空间自由的工作方式难道不完美吗？我刚入行不久就转做了Ruby on Rails开发，RoR是一种适合创业小团队快速迭代的利器。可能因为小团队更容易做到远程这个事，所以我也很早就听说了这样一种工作形式。国内比较早实行这种工作形式的，据我了解，应该是Tower（最近也和Tower的人聊过，Tower已经不再是当年的Tower了，还是有些感慨）。远程工作令当时年轻的我艳羡不已，可由于自己当时还不够自信，没有走出迈向心中“殿堂”的第一步。为什么我会向往向往远程工作的原因应该对广大“社畜”来说是显而易见的  当你每天需要挤着挤不上去的地铁，坐上1个小时，甚至更多的时间才能够到达还算舒服的办公室。你肯定恨透了这种你每天必须重复的通勤。  当你想每天抽一点时间让自己学习的时候，发现公司加班或长时间的通勤已经把你的精力消耗殆尽  当你想多陪陪家人的时候，你发现大城市的高房价，家乡的低薪资（甚至无适合工作）都让你绝望  当你刷完朋友圈里朋友的旅行照片后，还是无奈向生活弯了腰而这些当今社会中的普遍问题，远程工作看起来都能够帮你解决，香不香？为什么我会放弃既然这么香，我为什么会放弃?当然，远程工作能解决很多问题，也会带来一些问题，Google上有很多讨论远程工作优缺点的文章。其中，你就可以看到很多远程工作才会产生的问题。而对于我来说，最终让我放弃这样一个不错的远程工作机会的主要原因是  我不想一直做一个一线开发者，哪怕拿着非常有竞争力的薪资  我期望结识更多的伙伴，他们会是我另一种宝贵的财富我不想一直做一个一线开发者，哪怕拿着非常有竞争力的薪资作为一个已经过了30岁的程序员，是否要一直做一线开发者的思考是不可避免的焦虑感。我也会有这样的焦虑感，但更多的是我对自己能力的认识。我自认为沟通能力, 产品意识等综合能力是自己的优势。而选择更注重交付的远程工作，可能会失去自己的优势。且我也不想只做一个“螺丝钉”，我还是期待自己能够和同事“争吵”之后，为所做的产品贡献一点不错的建议。我期望结识更多的伙伴，他们会是我另一种宝贵的财富另一个重要的原因是身边的人。远程工作天然具有隔离属性，你和同事之间的联接和关系不太会“朝夕相处”时那么“亲密”。而这些人在中长期来看，会给你带来很多意想不到的价值。我在当前的公司中，认识了很多人，他们让我非常珍惜，我不想失去这样的机会，包括现在和将来。我的答案可能是人生阶段的不同导致了不同的选择。如果是三四年前的我，肯定毫不犹豫选择远程。而今天的我可能会考虑更多，总结远程工作是向往自由的人都期待的工作方式，可以在当下忙碌的工作中体验自由呼吸的方式，活的更有尊严。然而，这不是无本的买卖，你所需要付出的东西在某种程度上说也是宝贵的。在每一个人生路口做出自己的选择，是非常难的事，却是成长的必经之路。有的选择甚至在不同的时期的自己来看都是难以理解的。"
  },
  
  {
    "title": "Principles",
    "url": "/posts/principles/",
    "categories": "reading",
    "tags": "",
    "date": "2021-01-10 00:00:00 +0800",
    





    "snippet": "由于读了Ray Dalio的《原则》，借鉴其中不断记录自己通过犯错和人生体验总结出的原则(principle)的方式，在这里记录自己当前认为比较对的一些原则的总结.  专业的事情交给专业的人做会更加有效  交易时永远不要满仓。市场里永远不缺机会，缺的是把握机会的能力  做投资，不要怕利润少，做好防守，相信复利和时间的魔力"
  },
  
  {
    "title": "Enable Google Page Views",
    "url": "/posts/enable-google-pv/",
    "categories": "Blogging, Tutorial",
    "tags": "google analytics, pageviews",
    "date": "2021-01-04 07:32:00 +0800",
    





    "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well.  Head to https://analytics.google.com/ and click on Start Measuring  Enter your desired Account Name and choose the desired checkboxes  Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard  Enter the required information About your business  Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps:  Go to Admin on the left column  Select the desired property from the drop-down on the second column  Click on Data Streams  Add a stream and click on Web  Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics:  id: &#39;G-V6XXXXXXX&#39;   # fill in your Google Analytics ID  # Google Analytics pageviews report settings  pv:    proxy_endpoint:   # fill in the Google Analytics superProxy endpoint of Google App Engine    cache_path:       # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine      Visit https://console.cloud.google.com/appengine        Click on Create Application        Click on Create Project        Enter the name and choose the data center close to you        Select Python language and Standard environment        Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient.        Go to your App Engine dashboard on your browser and select API &amp;amp; Services from the left navigation menu        Click on Enable APIs and Services button on the top        Enable the following APIs: Google Analytics API        On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status        Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&amp;lt;project-id&amp;gt;.&amp;lt;region&amp;gt;.r.appspot.com/admin/auth        Note down the Your Client ID and Your Client Secret. You’ll need this in the next section.        Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart        Run the following commands:    [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser:    https://accounts.google.com/o/oauth2/auth?response_type=code&amp;amp;client_id=XYZ.apps.googleusercontent.com&amp;amp;redirect_uri=ABCDEFGEnter verification code: &amp;lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&amp;gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here      Setup Google Analytics superProxy      Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local.        Remove the first 2 lines in the src/app.yaml file:    - application: your-project-id- version: 1            In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard.        Enter any random key for XSRF_KEY, your config.py should look similar to this    #!/usr/bin/python2.7__author__ = &#39;pete.frisella@gmail.com (Pete Frisella)&#39;# OAuth 2.0 Client SettingsAUTH_CONFIG = {  &#39;OAUTH_CLIENT_ID&#39;: &#39;YOUR_CLIENT_ID&#39;,  &#39;OAUTH_CLIENT_SECRET&#39;: &#39;YOUR_CLIENT_SECRET&#39;,  &#39;OAUTH_REDIRECT_URI&#39;: &#39;%s%s&#39; % (    &#39;https://chirpy-test-XXXXXX.ue.r.appspot.com&#39;,    &#39;/admin/auth&#39;  )}# XSRF SettingsXSRF_KEY = &#39;OnceUponATimeThereLivedALegend&#39;              You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL.            From inside the src/ directory, deploy the app    [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor:      [/tmp/google-analytics-super-proxy/src/app.yaml]source:          [/tmp/google-analytics-super-proxy/src]target project:  [chirpy-test-XXXX]target service:  [default]target version:  [VESRION_NUM]target url:      [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage                 ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse            Visit the deployed service. Add a /admin to the end of the URL.        Click on Authorize Users and make sure to add yourself as a managed user.        If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix.  If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows:  start-date: fill in the first day of blog posting  end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date)  metrics: select ga:pageviews  dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1:      filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=.    Among them, ; means using logical AND to concatenate two rules.    If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl.  After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics:  id: &#39;G-V6XXXXXXX&#39;   # fill in your Google Analytics ID  pv:    proxy_endpoint: &#39;https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&amp;lt;ID FROM SUPER PROXY&amp;gt;&#39;    cache_path:       # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference            Google Analytics Core Reporting API: Filters &amp;#8617;      "
  },
  
  {
    "title": "聊一聊设计模式",
    "url": "/posts/%E8%81%8A%E4%B8%80%E8%81%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
    "categories": "programming",
    "tags": "",
    "date": "2020-11-15 00:00:00 +0800",
    





    "snippet": "背景作为程序员，数据结构, 算法和设计模式是经常被提起，且绕不过的三扇大门。对这三项通用技能的掌握可能直接影响你能拿到手的钱。相对来说，数据结构和算法还是比较实际，只要你花时间，不断练习，都不会太差的东西，类似武功中的招数。而设计模式却虚无缥缈很多，类似于武功的心法，需要你自己领悟，只有真正领悟透彻后，它才是你能够使用的利器。那学习设计模式，我们又是在学习什么呢？它能给我们带来什么呢？学习设计模式是为了什么学习设计模式其实本质是在学习如何将我们的代码解耦，且易于后续的扩展。这样，可维护性提高了之后，日后的需求改动所需要的代码改动会有质的差别。毕竟 不变的只有变化 嘛。设计原则和设计模式的关系说到设计模式，我们应该再说说设计原则和设计模式之间的关系。设计原则是指导我们代码设计的一些经验总结，对于某些场景下，是否应该应用某种设计模式，具有指导意义。比如，“开闭原则”是很多设计模式（策略、模板等）的指导原则。而设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。应用设计模式的主要目的是提高代码的可扩展性。从抽象程度上来讲，设计原则比设计模式更抽象。设计模式更加具体、更加可执行。设计原则和设计模式共同对我们的代码规范和日常代码起着指导性的作用。设计原则设计原则主要包含SOLID原则, KISS原则, YAGNI原则, DRY原则, LOD原则。我们分别来说说代表的意思。SOLID原则SOLID原则包含了多个重要设计原则指的是  SRP - Single Responsibility Principle 单一职责原则  OCP - Open Close Principle 开闭原则  LSP - Liskov Substitution Principle 里氏替换原则  ISP - Interface Segregation Principle 接口隔离原则  DIP - Dependency Inversion Principle 依赖反转原则KISS原则Keep it Simple and StupidYAGNI原则You Ain’t Gonna Need it. 在设计或开发的时候，多思考是否真的需要，避免过度设计。DRY原则Don’t Repeat Yourself 不要写重复的代码。LOD原则Law of Demeter, AKA, The Least Knowledge Principle. 迪米特法则。高内聚、低耦合。底层较通用的类需要尽量不依赖其他类，做好抽象，达到足够的解耦。"
  },
  
  {
    "title": "Customize the Favicon",
    "url": "/posts/customize-the-favicon/",
    "categories": "Blogging, Tutorial",
    "tags": "favicon",
    "date": "2019-08-11 00:34:00 +0800",
    





    "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp;amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files:  browserconfig.xml  site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files:            File(s)      From Online Tool      From Chirpy                  *.PNG      ✓      ✗              *.ICO      ✓      ✗        ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition."
  },
  
  {
    "title": "Getting Started",
    "url": "/posts/getting-started/",
    "categories": "Blogging, Tutorial",
    "tags": "getting started",
    "date": "2019-08-09 20:55:00 +0800",
    





    "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme:  Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing.  Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &amp;lt;GH_USERNAME&amp;gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &amp;lt;GH_USERNAME&amp;gt;.github.io. Please note that the default branch code is in development.  If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init.sh  If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will:  Removes some files or directories from your repository:          .travis.yml      files under _posts      folder docs            If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github.        Removes item Gemfile.lock from .gitignore.    Creates a new commit to save the changes automatically.Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options:  url  avatar  timezone  langCustoming StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\    --volume=&quot;$PWD:/srv/jekyll&quot; \\    -p 4000:4000 jekyll/jekyll \\    jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using Github ActionsFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using plugins to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the GitHub Pages service.Quickly check the files needed for GitHub Actions build:      Ensure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name.        Ensure your Jekyll site has file tools/deploy.sh. Otherwise, copy it from here to your Jekyll site.        Furthermore, if you have committed Gemfile.lock to the repo, and your runtime system is not Linux, don’t forget to update the platform list in the lock file:    $ bundle lock --add-platform x86_64-linux      After the above steps, rename your repository to &amp;lt;GH_USERNAME&amp;gt;.github.io on GitHub.Now publish your Jekyll site by:      Push any commit to remote to trigger the GitHub Actions workflow. Once the build is complete and successful, a new remote branch named gh-pages will appear to store the built site files.        Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar, and then in the section Source of GitHub Pages, select the /(root) directory of branch gh-pages as the publishing source. Remember to click Save before leaving.            Visit your website at the address indicated by GitHub.  Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\    --env JEKYLL_ENV=production \\    --volume=&quot;$PWD:/srv/jekyll&quot; \\    jekyll/jekyll \\    jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme:      If you are using the theme gem (there will be gem &quot;jekyll-theme-chirpy&quot; in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example:    - gem &quot;jekyll-theme-chirpy&quot;, &quot;~&amp;gt; 3.2&quot;, &quot;&amp;gt;= 3.2.1&quot;+ gem &quot;jekyll-theme-chirpy&quot;, &quot;~&amp;gt; 3.3&quot;, &quot;&amp;gt;= 3.3.0&quot;        And then execute the following command:    $ bundle update jekyll-theme-chirpy        As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme.        If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts.  "
  },
  
  {
    "title": "Writing a New Post",
    "url": "/posts/write-a-new-post/",
    "categories": "Blogging, Tutorial",
    "tags": "writing",
    "date": "2019-08-08 14:10:00 +0800",
    





    "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]     # TAG names should always be lowercase---  The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:---author:  name: Full Name  link: https://example.com---Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=&quot;700&quot; height=&quot;400&quot; }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=&quot;700&quot; h=&quot;400&quot; }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right.  Once the position is specified, the image caption should not be added.      Normal position    Image will be left aligned in below sample:    ![Desktop View](/assets/img/sample/mockup.png){: .normal }            Float to the left    ![Desktop View](/assets/img/sample/mockup.png){: .left }            Float to the right    ![Desktop View](/assets/img/sample/mockup.png){: .right }      ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&amp;lt;img src=&quot;https://cdn.com/path/to/flower.png&quot; alt=&quot;The flower&quot;&amp;gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&amp;lt;img src=&quot;/img/path/flower.png&quot; alt=&quot;The flower&quot;&amp;gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute src, width, height, and alt for the image:---image:  src: /path/to/image/file  width: 1000   # in pixels  height: 400   # in pixels  alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the  attribute src only needs the image file name.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are three types of prompts, note, warning and danger. When writing, add the class prompt-{type} to a blockquote:  Note    &amp;gt; Example line for prompt.{: .prompt-note }        Warning    &amp;gt; Example line for prompt.{: .prompt-warning }        Danger    &amp;gt; Example line for prompt.{: .prompt-danger }      SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value```  The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho &#39;No more line numbers!&#39;```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=&quot;path/to/file&quot; }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains &#39;Pack&#39; %}  This product&#39;s title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts."
  },
  
  {
    "title": "Text and Typography",
    "url": "/posts/text-and-typography/",
    "categories": "Blogging, Demo",
    "tags": "typography",
    "date": "2019-08-08 11:33:00 +0800",
    





    "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list  Firstly  Secondly  ThirdlyUnordered list  Chapter          Section                  Paragraph                    Task list  TODO  Completed  Defeat COVID-19          Vaccine production      Economic recovery      People smile again      Description list  Sun  the star around which the earth orbits  Moon  the natural satellite of the earth, visible by reflected light from the sunBlock Quote  This line shows the block quote.Prompts  An example showing the note type prompt.  An example showing the warning type prompt.  An example showing the danger type prompt.Tables            Company      Contact      Country                  Alfreds Futterkiste      Maria Anders      Germany              Island Trading      Helen Bennett      UK              Magazzini Alimentari Riuniti      Giovanni Rovelli      Italy      Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images  Default (with caption)Full screen width and center alignment  Shadowshadow effect (visible in light mode)  Left aligned      Float to left    “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.”        Float to right    “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.”  Mermaid SVG gantt  title  Adding GANTT diagram functionality to mermaid  apple :a, 2017-07-20, 1w  banana :crit, b, 2017-07-23, 1d  cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then    echo &quot;The command was not successful.&quot;;    #do the needful / exitfi;Specific filename@import  &quot;colors/light-typography&quot;,  &quot;colors/dark-typography&quot;Reverse Footnote            The footnote source &amp;#8617;              The 2nd footnote source &amp;#8617;      "
  },
  
  {
    "title": "Learning metaprogramming",
    "url": "/posts/learning-metaprogramming/",
    "categories": "ruby, programming",
    "tags": "",
    "date": "2015-02-01 06:07:20 +0800",
    





    "snippet": "1. Dynamic Patchthe send method could be used to call methods  obj.send(:my_method, params)2. Dynamic Methodthe define_method method could be used to create instance method  class Foo do    define_method(name) do      info = @data_source.send &quot;get_#{name}_info&quot;, @id price = @data_source.send &quot;get_#{name}_price&quot;, @id result = &quot;#{name.capitalize}: #{info} ($#{price})&quot; return &quot;* #{result}&quot; if price &amp;gt;= 100      result    end  endthe instance_method could be used to call an instance method  f = Foo.new  f.instance_method(:method_name)3. Remove Methodthe undef_method method could be used to remove method, it would remove both receiver’s methods and inherited methods  undef_method method_namethe remove_method method is similar, but it leaves the inherited methods  remove_method method_name"
  },
  
  {
    "title": "Ruby: Clean your code!",
    "url": "/posts/ruby-clean-your-code/",
    "categories": "ruby, programming",
    "tags": "",
    "date": "2014-05-05 00:00:00 +0800",
    





    "snippet": "1. Minimize the number of “nested if statement”“nested if statement” is normally considered as the code smell. We should try to minimize the number of “nested if statement”, though we cannot avoid using it completely.1. if the ‘if statement’ is embraced by a loop and without ‘else’, use ‘next’ insteadoriginal code: foo.each do |f|   if bar     if baz       ...     else       ...     end   end endIt looks not quike clean, isn’t it?cleaned code: foo.each do |f|   next if bar   if baz     ...   else     ...   end endIt looks much better to me.2. use variable to eliminate the ‘if statement’original code: if bar   name = &quot;Jevan&quot;   age = 24 else   name = &quot;John&quot;   age = 24 endcleaned code: user_name = bar ? &quot;Jevan&quot; : &quot;John&quot; name = user_name age = 24"
  },
  
  {
    "title": "Confident Ruby",
    "url": "/posts/reading-note-confident-ruby/",
    "categories": "ruby, programming, reading",
    "tags": "",
    "date": "2014-03-10 06:51:42 +0800",
    





    "snippet": "Collecting Input  Identify the messages  Identify the role (receiver) which correspond to those messages  Ensure the method’s logic receives objects which can play  those roles#### description    1. Parse the purchase records from the CSV contained in a provided IO object.    2. For each purchase record, use the record’s email address to get the associated customer record, or, if the email hasn’t been seen before, create a new customer record in our system.    3. Use the legacy record’s product ID to find or create a product record in our system.    4. Add the product to the customer record’s list of purchases.    5. Notify the customer of the new location where they can download their files and update their account info.    6. Log the successful import of the purchase record.#### Identify the message    1. #parse_legacy_purchase_records.    2. For #each purchase record, use the record’s #email_address. to#get_customer.    3. Use the record’s product_id to #get_product.    4. #add_purchased_product to the customer record.    5. #notify_of_files_available for the purchased product.    6. #log_successful_import of the product record.#### Identify the role  1. legacy_data_parser.parse_purchase_records.  2. Forpurchase_list.eachpurchase_record,usepurchase_record.email_address  to customer_list.get_customer.  3. Usethepurchase_record.product_idtoproduct_inventory.get_product.  4. customer.add_purchased_product.  5. customer.notify_of_files_available for the product.  6. self.log_successful_import of the purchase_record.#### Converting to real codePerforming TaskDelivering outputHandling failures"
  },
  
  {
    "title": "How to set up the environment of Ruby on Rails",
    "url": "/posts/how-to-set-up-the-environment-of-ruby-on-rails/",
    "categories": "ruby, programming",
    "tags": "",
    "date": "2014-03-09 06:35:42 +0800",
    





    "snippet": "1. Install RVM and RubyRVM is used to manage different version of ruby. With RVM, you can switch between multiple different version of ruby.  To install RVM, simply type the following command in the terminal  $ \\curl -sSL https://get.rvm.io | bashor, more convenient, you can just install the RVM with stable ruby by using  $ \\curl -sSL https://get.rvm.io | bash -s stable --rubyWhen you finish this step, you can type  ruby -vto check if the ruby is available.2. Install RailsRails is the popular web framework based on ruby.  With Ruby installed, you can install all of Rails and its dependencies through RubyGems on the command line:  gem install railstype  rails -vto check if the rails is available.Here we go! Welcome to the world of Ruby on Rails"
  }
  
]

